input NewProductInput {
  typeId: ID!
  name: String!
  description: String
  price: Float!
  requiredPropertyIds: [ID]!
}

input UpdatedProductInput {
  id: Int!
  name: String
  description: String
  price: Float
}

enum OrderBy {
  ASC
  DESC
}

input ProductOrderBy {
  name: OrderBy
  price: OrderBy
  createdAt: OrderBy
  sales: OrderBy
}

type Query {
  products(take: Int!, skip: Int!, keyword: String, orderBy: ProductOrderBy): [Product]!
  product(id: ID!): Product

  allProducts(
    id: ID,
    name: String,
    description: String,
    price: Float,
    published: Boolean
  ): [Product]! @auth
}

type Mutation {
  createProduct(newProduct: NewProductInput!): Boolean @auth
  updateProduct(updatedProduct: UpdatedProductInput!): Boolean @auth
  deleteProduct(id: ID!): Boolean @auth

  publishProduct(id: ID!, published: Boolean!): Boolean @auth
  addProductRequiredProperties(id: ID!, propertyNameIds: [ID]!): Boolean @auth
  removeProductRequiredProperties(id: ID!, propertyNameIds: [ID]!): Boolean @auth
}

type Product {
  id: ID!
  name: String!
  description: String
  price: Float!
  published: Boolean! @auth

  images: [String]!
  imageDir: String!
}

type ProductType {
  products: [Product]!
}

type Stock {
  product: Product!
}